{"version":3,"sources":["services/persons.js","components/Person.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","newObj","axios","post","then","response","data","get","id","delete","modifiedObj","put","Person","person","handleDelete","name","number","onClick","Notification","props","message","style","error","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","notification","setNotification","setError","useEffect","personDb","r","onChange","event","target","value","onSubmit","preventDefault","isExist","filter","length","window","confirm","newPerson","updatedPerson","map","p","setTimeout","catch","console","log","Math","floor","random","returnedPerson","concat","type","toLowerCase","includes","i","key","n","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b66dd68a.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\n//insert person obj in phonebook db\r\nconst create = (newObj) => {\r\n    const request = axios.post(baseUrl, newObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nconst updatePerson = (id, modifiedObj) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, modifiedObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { create, getAll, deletePerson, updatePerson }","import React from 'react'\r\n\r\nconst Person = ({person, handleDelete}) => {\r\n    return (\r\n            <li>\r\n                {person.name} {person.number}\r\n                <button onClick={handleDelete}>delete</button>\r\n            </li>\r\n    )\r\n}\r\n\r\nexport default Person;","import React from 'react'\r\n\r\nconst Notification = (props) => {\r\n    const notificationStyle = {\r\n        color: 'green',\r\n        background: 'lightgray',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 5,\r\n        marginBottom: 10,\r\n\r\n    }\r\n    const errorStyle = {\r\n        color: 'red',\r\n        background: 'lightgray',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 5,\r\n        marginBottom: 10,\r\n    }\r\n    if (props.message === null)\r\n        return (<div> </div>)\r\n        \r\n    return (\r\n        <div style={props.error === true ? errorStyle : notificationStyle}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personDb from './services/persons'\nimport Person from './components/Person'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    personDb\n      .getAll().then(r => {\n        setPersons(r)\n      })\n  }, [])\n\n  const handleDeleteOne = (name, id) => {\n    if (window.confirm(`Are you sure to delete ${name} ?`)) {\n      personDb\n        .deletePerson(id)\n        .then(() => {\n          setPersons(persons.filter(n => n.id !== id))\n          setNewName('')\n          setNewNumber('')\n          setNotification(`person by name ${name} deleted successfully`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n        })\n        .catch(error => {\n          console.log('error')\n          setError(true)\n          setNotification(`this object does not exist any more`)\n          setPersons(persons.filter(p => p.name !== name))\n          setTimeout(() => {\n            setNotification(null)\n            setError(false)\n          }, 5000)\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const isExist = persons.filter(person => person.name === newName)\n\n    if (!(isExist.length > 0)) {\n      const newPerson = {\n        name: newName,\n        number: newNumber,\n        id: Math.floor(Math.random() * 101)\n      }\n      personDb\n        .create(newPerson)\n        .then(returnedPerson => {\n          console.log(returnedPerson)\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotification(`person added successfully`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setNotification(error.response.data)\n        })\n    }\n    else {\n      if (window.confirm(`${isExist[0].name} is already exist, do you want to update its information?`)) {\n\n        const newPerson = {\n          name: isExist[0].name,\n          number: newNumber,\n          id: isExist[0].id\n        }\n        personDb\n          .updatePerson(isExist[0].id, newPerson)\n          .then(updatedPerson => {\n            setPersons(persons.map(p => p.name === newPerson.name ? updatedPerson : p))\n            setNotification(`${newPerson.name} updated successfully`)\n            setNewName('')\n            setNewNumber('')\n            setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n          })\n          .catch(error => {\n            console.log(error)\n          })\n      }\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event) => {\n   // console.log(newFilter)\n    setNewFilter(event.target.value)\n  }\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <div>filter shown with <input onChange={handleFilterChange} value={newFilter} /></div>\n      <h2>Add a new</h2>\n      <Notification error={error} message={notification} />\n      <form onSubmit={addPerson}>\n        <div>name: <input onChange={handleNameChange} value={newName} /></div>\n        <div>number: <input onChange={handleNumberChange} value={newNumber} /></div>\n        <div><button type=\"submit\">add</button></div>\n      </form>\n      <h2>Numbers</h2>\n\n      <ul>\n        {persons.filter(p => p.name.toLowerCase().includes(newFilter.toLowerCase()))\n          .map((person, i) =>\n            <Person\n              key={i}\n              person={person}\n              handleDelete={() => handleDeleteOne(person.name, person.id)}\n            />)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}