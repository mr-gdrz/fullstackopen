{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObj","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteServices","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8NAiBeA,EAdF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBACA,iBACJ,OACE,wBAAKC,UAAU,QACZJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCRpCK,EAAU,qDAsBD,EAlBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAgB9B,EAZA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAU9B,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCL9BK,G,MAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,yBAAKd,UAAU,SACVc,KCFPC,EAAS,WAMX,OACI,yBAAKC,MANW,CAChBC,MAAQ,QACRC,UAAW,SACXC,SAAU,KAIN,6BACA,uGAoGGC,EA9FH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,IAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,MAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KA8BnBC,qBAAU,WACNC,IAEK1B,MAAK,SAAA2B,GACFT,EAASS,QAElB,IAGH,IAsBMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAACvC,GAAD,OAAUA,EAAKG,aAClC,OACI,6BACI,qCACA,kBAAC,EAAD,CAAce,QAASe,IACvB,6BACI,4BAAQ3B,QAAS,kBAAM0B,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKO,EAAYE,KAAI,SAACxC,EAAMyC,GAAP,OACb,kBAAC,EAAD,CACIC,IAAKD,EACLzC,KAAMA,EACNC,iBAAkB,kBAxEb,SAAAc,GAErB,IAAMf,EAAO2B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAEhC8B,EAAW,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDiC,EACYrB,EAAI8B,GAAanC,MAAK,SAAAoC,GAC1BlB,EAASD,EAAMa,KAAI,SAAAxC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO8C,SAEtDC,OAAM,SAAAC,GACHd,EAAgB,QAAD,OACHlC,EAAKK,QADF,oCAGf4C,YAAW,WACPf,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAE7B,KAAOA,SAuDJd,CAAiBD,EAAKe,WAG1D,0BAAMmC,SA1CE,SAAAC,GACZA,EAAMC,iBAEN,IAAMC,EAAa,CACfhD,QAASwB,EACTyB,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAG/BtB,EACYiB,GACP3C,MAAK,SAAAoC,GACFlB,EAASD,EAAMgC,OAAOb,IACtBhB,EAAW,SA8BX,2BACI8B,MAAO/B,EACPgC,SA5BK,SAACV,GAClBrB,EAAWqB,EAAMW,OAAOF,UA6BhB,4BAAQG,KAAK,UAAb,SAGJ,kBAAC,EAAD,QC3GZC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.de5a4d45.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? \"Make not important\" \r\n    : \"Make important\"\r\n  return (\r\n    < li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li >\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = 'https://secret-earth-35786.herokuapp.com/api/notes'\r\n\r\n\r\n//get all notes from db.json\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//create\r\nconst create = newObj => {\r\n    const request = axios.post(baseUrl, newObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//update object\r\nconst update = (id, newObj) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update }\r\n\r\n\r\n","import React from 'react'\r\nimport '../index.css'\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return(\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from \"react\";\r\nimport Note from './components/Note'\r\nimport noteServices from './services/notes'\r\nimport Notification from './components/Notification'\r\n\r\n\r\n\r\n\r\nconst Footer = () =>{\r\n    const footerStyle = {\r\n        color : 'Green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    return(\r\n        <div style = {footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst App = (props) => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    const toggleImportance = id => {\r\n\r\n        const note = notes.find(n => n.id === id)\r\n        //...note called shallow copy\r\n        const changedNote = { ...note, important: !note.important }\r\n        \r\n        noteServices\r\n            .update(id, changedNote).then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note ${note.content} was alredy removed from server`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n                //...doing something else, on error situation\r\n            })\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        noteServices\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n\r\n\r\n    const addNote = event => {\r\n        event.preventDefault()\r\n        // console.log('button clicked', event.target)\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n            //id: not  es.length + 1,\r\n        }\r\n        noteServices\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setNewNote(event.target.value)\r\n        /*handling changes*/\r\n    }\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter((note) => note.important)\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage}/>\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? 'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map((note, i) =>\r\n                    <Note\r\n                        key={i}\r\n                        note={note}\r\n                        toggleImportance={() => toggleImportance(note.id)} />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input\r\n                    value={newNote}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\";\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'))"],"sourceRoot":""}